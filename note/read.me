/**session基本原理
//一般用来跟踪用户，在服务器和用户之间有一个一一对应的关系，一个用户的所有请求应该属于同一个会话，会话间是相互独立的。
//我们的网站一般使用http协议传输数据，http协议是一个无状态的协议，一旦数据交换完成，客户端和服务器端的链接就会关闭，服务器无法从连接上跟踪会话了，所以引进一种机制来弥补http协议无状态的不足，一般通过cookie和session来实现，cookie通过在客户端记录信息来确定用户身份，session通过服务器端记录信息，来确定用户的身份。
一、cookie
在session没有出现以前，基本上所有网站都用cookie.每一次http请求，都会带给服务器当前域下的cookie值，服务器通过解析这些普通的cookie值（或者加密后的cookie值），来辨识当前用户的信息。这些cookie数据都是存储到客户端，也就是浏览器的键值对。可以删除更改，设置过期日期等，也有最大存储容量的限制。
二、session
和cookie来配合使用，当程序需要为某个客户端请求创建一个session的时候，服务器首先检查这个客户端的请求里面是否包含了一个session的标识sessionId，如果有，说明这个客户端以前创建过session,服务器根据这个sessionId把这个session给找出来，如果客户端请求里没有这个sessionId,那就为这个客户创建一个session,并且生成一个跟这个session关联的一个sessionId，然后这个sessionId的值是一个不会重复，切不容易找到规律的字符串，这样防止被伪造。这个sessionId返回给客户端保存起来。保存sessionId的方式可以采用cookie,这样在交互过程中，浏览器可以自动的按照规则把标识发送给服务器，一般来说这个cookie名类似于sessionid,比如说依赖于这个connect.express,默认值就是connect.sid,一般情况下session都存储在内存里，当服务器进场被停止，或者是重启的时候，内存里的session会被清空，如果设置session持久化的特性，服务器把session保存到硬盘上，那么当服务器进程重新启动之后，这些信息就能够再次被使用，对于session的持久化，有几种常见的方式：
1）基于cookie的方式,把数据直接存储到cookie里面，解析后能获得
2）基于内存的方式，使用内存当中的容器，来存储数据
3）redis把数据存入到redis数据库中，这样不同进程都可以获取到session数据，cookie解析后，获取到sessionid,通过sessionid，从redis里获取相应的数据
4）mongodb 和redis原理差不多。
在3.x或4.x中，express是建立在connect这个模块的封装，express的cookieparser是cookie解析的中间件，那么express的session是用来提供会话支持，在session里可以配置secret,用来防止篡改cookie,key是cookie名,max-age,cookie的生存周期等，store参数为一个mongo造一个实例，可以把会话信息存到数据库里，这样避免丢失，那么就可以通过 req.session获取当前的会话对象，express里的session解析依赖于cookie-parser,所以要从cookie中读取加密的connect.sid，再通过cookie-parser解析成一个对应的sessionId,那么这个sessionId,被保存到req.sessionId中，因此cookie-parser中间件放在session前面，在通过session中间件的时候，通过session的store对象，来读取当前的session数据，所以当多个请求并发过来时，拿到的是同一份session数据，每个协议在调用response.end这个时候，session的数据都会被自动保存一次。
**/